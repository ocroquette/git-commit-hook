/*
 * This build file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/4.2.1/userguide/tutorial_java_projects.html
 */

// Apply the java plugin to add support for Java
apply plugin: 'java'

// For spock:
apply plugin: "groovy"

// Apply the application plugin to add support for building an application
apply plugin: 'application'

// In this section you declare where to find the dependencies of your project
repositories {
    // Use jcenter for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

dependencies {
    compile "com.atlassian.jira:jira-rest-java-client-core:4.0.0"
    compile "com.atlassian.fugue:fugue:2.2.1" // Dependency of jira-rest-java-client-core
    compile "org.slf4j:slf4j-simple:1.7.25"

    testCompile "org.spockframework:spock-core:1.1-groovy-2.4"
    testCompile "org.hamcrest:hamcrest-core:1.3" // only necessary if Hamcrest matchers are used
    testRuntime "net.bytebuddy:byte-buddy:1.6.5" // allows mocking of classes (in addition to interfaces)
    testRuntime "org.objenesis:objenesis:2.5.1"  // allows mocking of classes without default constructor
}

def generatedResources = "$buildDir/generated-resources/main"

sourceSets {
    main {
        output.dir(generatedResources, builtBy: 'generateJiraConfiguration')
    }
}

jar {
    manifest {
        attributes "Main-Class": "com.github.ocroquette.commithook.Main"
    }

    from {
        // We want the JAR to contain all dependencies (fat JAR)
        configurations.compile.collect {
            it.isDirectory() ? it : zipTree(it)
        }
    }
}

task generateJiraConfiguration {
    description "Generate the property file with the configuration to access the Jira server"
    group "build"
    doLast {
        def pkgName = "com.github.ocroquette.commithook"
        def pkgPath = pkgName.replace(".", "/")
        def propertyNames = [
                "jiraUrl",
                "jiraUser",
                "jiraPassword",
                "wrapLength"
        ]
        def propertyFile = file(generatedResources + "/" + pkgPath + "/settings.properties")
        def props = new Properties()
        def missingProperties = []
        propertyNames.each { propertyName ->
            // Read the project properties from Gradle and save them in $generatedResources/jira.properties
            if (project.hasProperty(propertyName))
                props.setProperty(propertyName, project.property(propertyName))
            else {
                props.setProperty(propertyName, "")
                missingProperties.add(propertyName)
            }
        }
        propertyFile.parentFile.mkdirs()
        propertyFile.withWriter { props.store(it, "Generated from project properties") }
        if (!missingProperties.isEmpty()) {
            project.logger.warn("WARNING: following project properties are not set for configuration: "
                    + missingProperties.join(", "))
        }
    }
}

task createShellScript {
    group "Custom"
    dependsOn "jar"
    description "Create a shell script that contains the JAR file and extracts it on the first execution"
    doLast {
        def base64 = new File("build/libs/git-commit-hook.jar").bytes.encodeBase64().toString().split("(?<=\\G.{100})").join("\n")
        def outputJar = "commit-msg.jar"
        new File("build/commit-msg").text = """#!/bin/sh

JAR="`dirname \$0`/$outputJar"

# Extract the JAR
echo "Extracting $outputJar"
awk '/^__BASE64__/ { P=1 ; next } { if ( P==1 ) print \$0 }' \$0 | base64 --decode > "\$JAR"

# Replace the extracting script by the starting script
(
    echo "#!/bin/sh"
    echo 'java -jar "`dirname \$0`/$outputJar" "\$@"'
) > "\$0.tmp"
mv "\$0.tmp" "\$0"
chmod +x "\$0"
java -jar "`dirname \$0`/$outputJar" "\$@"

exit 0

__BASE64__
""" + base64
    }
}
