/*
 * This build file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/4.2.1/userguide/tutorial_java_projects.html
 */

// Apply the java plugin to add support for Java
apply plugin: 'java'

// For spock:
apply plugin: "groovy"

// Apply the application plugin to add support for building an application
apply plugin: 'application'

// In this section you declare where to find the dependencies of your project
repositories {
    // Use jcenter for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

dependencies {
    // https://mvnrepository.com/artifact/com.atlassian.jira/jira-rest-java-client-core
    compile group: 'com.atlassian.jira', name: 'jira-rest-java-client-core', version: '4.0.0'
    compile "com.atlassian.fugue:fugue:2.2.1"
    compile group: 'org.slf4j', name: 'slf4j-simple', version: '1.7.25'

    testCompile "org.spockframework:spock-core:1.1-groovy-2.4"
    testCompile "org.hamcrest:hamcrest-core:1.3" // only necessary if Hamcrest matchers are used
    testRuntime "net.bytebuddy:byte-buddy:1.6.5"          // allows mocking of classes (in addition to interfaces)
    testRuntime "org.objenesis:objenesis:2.5.1" // allows mocking of classes without default constructor (together with CGLIB)
}

jar {
    manifest {
        attributes "Main-Class": "com.github.ocroquette.commithook.Main"
    }

    from {
        // Create fat JAR with all dependencies
        configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

task shellScript {
    dependsOn "jar"
    doLast {
        def base64 = new File("build/libs/git-commit-hook.jar").bytes.encodeBase64().toString().split("(?<=\\G.{100})").join("\n")
        def outputJar = "commit-msg.jar"
        new File("build/commit-msg").text = """#!/bin/sh

JAR="`dirname \$0`/$outputJar"
if [ ! -f "\$JAR" ]; then
  echo "Extracting $outputJar"
  awk '/^__BASE64__/ { P=1 ; next } { if ( P==1 ) print \$0 }' \$0 | base64 --decode > "\$JAR"
  awk '/^__BASE64__/ { exit 0 } { print \$0 }' "\$0" > "\$0.tmp"
  mv "\$0.tmp" "\$0"
fi

echo "Starting jar"
java -jar "\$JAR" "\$@"

exit 0

__BASE64__
""" + base64
    }
}